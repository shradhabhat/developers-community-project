package com.cg.service;
 
import java.util.ArrayList;
import java.util.List;
 
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
 
import com.cg.dto.VoteDto;
import com.cg.entity.Developer;
import com.cg.entity.Response;
import com.cg.entity.Vote;
import com.cg.exception.ApplicationException;
import com.cg.repository.DeveloperRepository;
import com.cg.repository.ResponseRepository;
import com.cg.repository.VoteRepository;
 
@Service
public class VoteServiceImplementation implements VoteService {
 
	@Autowired
	private VoteRepository voteRepository;
	@Autowired
	private ResponseRepository responseRepository;
	@Autowired
	private DeveloperRepository developerRepository;
 
	@Override
	public Vote addVote(VoteDto voteDto) {
		Response response=responseRepository.findById(voteDto.getResponse()).orElseThrow(()->new ApplicationException("Response not found"));
		Developer developer=developerRepository.findById(voteDto.getDeveloper()).orElseThrow(()->new ApplicationException("Developer not found"));
		Vote vote = new Vote();
		vote.setResponse(response);
		vote.setDeveloper(developer);
//		vote.setDownVote(voteDto.getDownVote());
//		vote.setUpVote(voteDto.getUpVote());
		vote.setVoteCount(voteDto.getVoteCount());
		voteRepository.save(vote);
		return vote;
	}
 
	@Override
	public Vote getVoteByVoteId(int voteId) {
		return voteRepository.findById(voteId).orElseThrow(()->new ApplicationException("Vote not found"));
	}
 
	@Override
	public List<Vote> getVoteByResponse(int responseId)  {
		responseRepository.findById(responseId).orElseThrow(()->new ApplicationException("Response not found"));
		return voteRepository.searchByResponseId(responseId);
	}
 
	@Override
	public List<Vote> getVoteByDeveloper(int developerId) {
		developerRepository.findById(developerId).orElseThrow(()->new ApplicationException("Developer not found"));
		return voteRepository.searchByDeveloperId(developerId);
	}
 
	@Override
	public List<Vote> getAllVotes() {
		return voteRepository.findAll();
	}
 
	@Override
	public void deleteVote( int voteId)  {
		voteRepository.findById(voteId).orElseThrow(()->new ApplicationException("Vote not found"));
		voteRepository.deleteById(voteId);
		return;
	}
 
	@Override
	public VoteDto updateVote(VoteDto voteDto, int voteId) {
		Vote vote = voteRepository.findById(voteId).orElseThrow(()->new ApplicationException("Vote not found"));
		//vote.setVoteType(voteDto.isVoteType());
		voteRepository.save(vote);
		return voteDto;
	}
 
 
	@Override
	public Vote updateDownvote(VoteDto voteDto,int responseId) {
		Response response = responseRepository.findById(responseId) .orElseThrow(() -> new ApplicationException("Response not found "));
		Vote vote = new Vote();
	    vote.setResponse(response);
	    //vote.setUpVote(voteDto.getUpVote());
	    //vote.setVoteCount(vote.getVoteCount());
	   	vote.setDownVote(voteDto.getDownVote());
	    Vote savedVote = voteRepository.save(vote);
        int downVote = 0;
        downVote = response.getDownVotes();
        response.setDownVotes(downVote+1);
        responseRepository.save(response);
        return savedVote;	
	}
 
 
	@Override
	public Vote updateUpvote(VoteDto voteDto, int responseId) {
		Response response = responseRepository.findById(responseId) .orElseThrow(() -> new ApplicationException("Response not found "));
		Vote vote = new Vote();
	    vote.setResponse(response);
	    vote.setDownVote(voteDto.getDownVote());
	    vote.setVoteCount(voteDto.getVoteCount());
	   	vote.setUpVote(voteDto.getUpVote());
	    Vote savedVote = voteRepository.save(vote);
        int upVote = 0;
        upVote = response.getUpVotes();
        response.setUpVotes(upVote+1);
        responseRepository.save(response);
        return savedVote;	
	}
 
 
 
}